// üìÅ js/utils/formatarMoeda.js

/**
 * Formata um n√∫mero para o padr√£o monet√°rio brasileiro (R$).
 * @param {number|string} valor - O valor num√©rico ou string num√©rica a ser formatado.
 * @returns {string} O valor formatado como string (ex: "R$ 1.234,56"). Retorna "R$ 0,00" para entradas inv√°lidas.
 */
function formatarMoeda(valor) {
    const numero = parseFloat(String(valor).replace(",", ".")); // Tenta converter v√≠rgula para ponto se for string
    if (isNaN(numero)) {
        return "R$ 0,00";
    }
    return numero.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });
}

/**
 * Converte uma string de moeda formatada (R$ 1.234,56 ou 1.234,56 ou 1234.56) para um n√∫mero.
 * @param {string} stringMoeda - A string formatada.
 * @returns {number} O valor num√©rico. Retorna 0 para entradas inv√°lidas.
 */
function moedaParaNumero(stringMoeda) {
    if (typeof stringMoeda !== 'string' || stringMoeda.trim() === "") return 0;

    // Remove "R$", espa√ßos em branco no in√≠cio/fim
    let valorLimpo = stringMoeda.replace("R$", "").trim();

    // Verifica se o √∫ltimo caractere antes de n√∫meros √© v√≠rgula (padr√£o BR) ou ponto (padr√£o US)
    // E se h√° pontos para milhares.
    const temPontoMilhar = valorLimpo.includes('.');
    const temVirgulaDecimal = valorLimpo.includes(',');

    if (temPontoMilhar && temVirgulaDecimal) { // Ex: 1.234,56
        valorLimpo = valorLimpo.replace(/\./g, ""); // Remove pontos de milhar
        valorLimpo = valorLimpo.replace(",", ".");  // Substitui v√≠rgula decimal por ponto
    } else if (temVirgulaDecimal && !temPontoMilhar) { // Ex: 1234,56
         valorLimpo = valorLimpo.replace(",", ".");
    } else if (temPontoMilhar && !temVirgulaDecimal) { // Ex: 1234.56 (pode ser padr√£o US ou milhar sem decimal)
        // Se houver mais de um ponto, o √∫ltimo √© provavelmente decimal.
        // Esta heur√≠stica pode falhar. Para maior robustez, uma lib de parsing seria ideal.
        // Mas, para este caso, vamos assumir que se s√≥ h√° pontos, √© formato US ou inteiro com pontos de milhar.
        // Se a inten√ß√£o √© s√≥ permitir entrada com v√≠rgula decimal, esta parte pode ser mais restritiva.
        // Por ora, mantendo a convers√£o simples:
        // A linha abaixo j√° remove pontos, ent√£o "1.234.56" se tornaria "123456"
        // valorLimpo = valorLimpo.replace(/\./g, ""); // Isso est√° errado se o ponto for decimal
        // Corrigindo: Apenas remove pontos se houver v√≠rgula depois, ou se for s√≥ ponto para milhar
        // A l√≥gica anterior era mais simples e pode ser suficiente se a entrada for controlada
        // Vou manter a l√≥gica anterior que √© mais simples:
        // valorLimpo = valorLimpo.replace(/\./g, "").replace(",", ".");
        // Reconsiderando: a original `replace(/\./g, "").replace(",", ".")` √© boa para "1.234,56" -> "1234.56"
        // Mas falha para "1234.56" (queremos 1234.56) pois o ponto √© removido.
        // E para "1,234.56" (padr√£o americano com v√≠rgula de milhar).

        // Melhor abordagem:
        // 1. Remove tudo que n√£o √© d√≠gito, v√≠rgula ou ponto
        valorLimpo = valorLimpo.replace(/[^\d,.-]/g, "");
        // 2. Se tem v√≠rgula E ponto, remove pontos e troca v√≠rgula por ponto
        if (valorLimpo.includes(',') && valorLimpo.includes('.')) {
            if (valorLimpo.lastIndexOf(',') > valorLimpo.lastIndexOf('.')) { // Formato BR: 1.234,56
                valorLimpo = valorLimpo.replace(/\./g, '').replace(',', '.');
            } else { // Formato US: 1,234.56
                valorLimpo = valorLimpo.replace(/,/g, '').replace('.', '.'); // O √∫ltimo replace √© redundante mas ok
            }
        } else if (valorLimpo.includes(',')) { // S√≥ v√≠rgula: 1234,56
            valorLimpo = valorLimpo.replace(',', '.');
        }
        // Se s√≥ tem ponto, j√° est√° no formato "1234.56" ou "1234" (inteiro)
        // Se n√£o tem nem v√≠rgula nem ponto, √© um n√∫mero inteiro ou decimal sem separador (ex: "123456")
    }


    const valorNumerico = parseFloat(valorLimpo);
    return isNaN(valorNumerico) ? 0 : valorNumerico;
}

// console.log('formatarMoeda.js carregado.');
